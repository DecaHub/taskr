"use strict";

/* eslint-disable quotes */

/* eslint no-extra-parens: ["error", "all", { "nestedBinaryExpressions": false }] */

var taskDescriptions = ["Read \"High Performance Mobile Web\" by Maximiliano Firtman.", "Integrate ngTouch on To-do list app.", "Walk to Target to buy floss.", "Donate Amazon boxes to Cat Shelter.", "Register for AngularMix ft. John Papa & Dan Wahlin.", "Watch \"Senior Devs react to React\" on YouTube.", "Do 40 minutes of Standing Desk Yoga", "Do 60 minutes of Start-Up Swiss Ball Calisthenics", "Watch \"Silicone Valley\" Season 4 on HBO.", "Pet a cow."];

var getRandomInt = function getRandomInt(min, max) {

	/**
  * Source: http://stackoverflow.com/a/18230432/6051978
  */

	var byteArray = new Uint8Array(1);

	window.crypto.getRandomValues(byteArray);

	var range = max - min + 1;

	var maxRange = 256;

	if (byteArray[0] >= Math.floor(maxRange / range) * range) {

		return getRandomInt(min, max);
	}

	return min + byteArray[0] % range;
};

var randomizeTaskList = function randomizeTaskList(taskList, numOfTasks, maxNumberOfTasks) {

	if (numOfTasks < 1 || maxNumberOfTasks < 1) {

		return null;
	}

	if (numOfTasks === maxNumberOfTasks) {

		return taskList;
	}

	if (numOfTasks < maxNumberOfTasks) {

		return null;
	}

	var randomNumbersSet = [];
	var count = maxNumberOfTasks;

	while (count > 0) {

		var randNumber = getRandomInt(0, numOfTasks - 1);

		if (!randomNumbersSet.includes(randNumber)) {

			randomNumbersSet.push(randNumber);
			count -= 1;
		}
	}

	return randomNumbersSet.map(function (num) {
		return taskList[num];
	});
};

var createTask = function createTask(taskDescription, taskID) {

	return {

		id: taskID,
		description: taskDescription,
		completed: false

	};
};

var createTaskList = function createTaskList(descriptions, TaskIDService) {

	var list = [];

	descriptions.map(function (description) {
		return list.push(createTask(description, TaskIDService.getID()));
	});

	return list;
};

var TaskDataService = function TaskDataService(TaskIDService) {

	var numberOfTasks = 10;
	var maxNumberOfTasks = 6;

	var taskList = randomizeTaskList(createTaskList(taskDescriptions, TaskIDService), numberOfTasks, maxNumberOfTasks);

	return {
		getTasks: function getTasks() {

			return taskList;
		}
	};
};

angular.module("main").factory("TaskDataService", TaskDataService);

TaskDataService.$inject = ["TaskIDService"];
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbW1vbi9zZXJ2aWNlcy90YXNrRGF0YS5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbInRhc2tEZXNjcmlwdGlvbnMiLCJnZXRSYW5kb21JbnQiLCJtaW4iLCJtYXgiLCJieXRlQXJyYXkiLCJVaW50OEFycmF5Iiwid2luZG93IiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwicmFuZ2UiLCJtYXhSYW5nZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbWl6ZVRhc2tMaXN0IiwidGFza0xpc3QiLCJudW1PZlRhc2tzIiwibWF4TnVtYmVyT2ZUYXNrcyIsInJhbmRvbU51bWJlcnNTZXQiLCJjb3VudCIsInJhbmROdW1iZXIiLCJpbmNsdWRlcyIsInB1c2giLCJtYXAiLCJudW0iLCJjcmVhdGVUYXNrIiwidGFza0Rlc2NyaXB0aW9uIiwidGFza0lEIiwiaWQiLCJkZXNjcmlwdGlvbiIsImNvbXBsZXRlZCIsImNyZWF0ZVRhc2tMaXN0IiwiZGVzY3JpcHRpb25zIiwiVGFza0lEU2VydmljZSIsImxpc3QiLCJnZXRJRCIsIlRhc2tEYXRhU2VydmljZSIsIm51bWJlck9mVGFza3MiLCJnZXRUYXNrcyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJmYWN0b3J5IiwiJGluamVjdCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7O0FBRUEsSUFBTUEsbUJBQW1CLGtiQUF6Qjs7QUFhQSxJQUFNQyxlQUFlLFNBQWZBLFlBQWUsQ0FBVUMsR0FBVixFQUFlQyxHQUFmLEVBQW9COztBQUV4Qzs7OztBQUlBLEtBQU1DLFlBQVksSUFBSUMsVUFBSixDQUFlLENBQWYsQ0FBbEI7O0FBRUFDLFFBQU9DLE1BQVAsQ0FBY0MsZUFBZCxDQUE4QkosU0FBOUI7O0FBRUEsS0FBTUssUUFBUU4sTUFBTUQsR0FBTixHQUFZLENBQTFCOztBQUVBLEtBQU1RLFdBQVcsR0FBakI7O0FBRUEsS0FBSU4sVUFBVSxDQUFWLEtBQWdCTyxLQUFLQyxLQUFMLENBQVdGLFdBQVdELEtBQXRCLElBQStCQSxLQUFuRCxFQUEwRDs7QUFFekQsU0FBT1IsYUFBYUMsR0FBYixFQUFrQkMsR0FBbEIsQ0FBUDtBQUVBOztBQUVELFFBQU9ELE1BQU9FLFVBQVUsQ0FBVixJQUFlSyxLQUE3QjtBQUVBLENBdEJEOztBQXdCQSxJQUFNSSxvQkFBb0IsU0FBcEJBLGlCQUFvQixDQUFVQyxRQUFWLEVBQW9CQyxVQUFwQixFQUFnQ0MsZ0JBQWhDLEVBQWtEOztBQUUzRSxLQUFJRCxhQUFhLENBQWIsSUFBa0JDLG1CQUFtQixDQUF6QyxFQUE0Qzs7QUFFM0MsU0FBTyxJQUFQO0FBRUE7O0FBRUQsS0FBSUQsZUFBZUMsZ0JBQW5CLEVBQXFDOztBQUVwQyxTQUFPRixRQUFQO0FBRUE7O0FBRUQsS0FBSUMsYUFBYUMsZ0JBQWpCLEVBQW1DOztBQUVsQyxTQUFPLElBQVA7QUFFQTs7QUFHRCxLQUFNQyxtQkFBbUIsRUFBekI7QUFDQSxLQUFJQyxRQUFRRixnQkFBWjs7QUFFQSxRQUFPRSxRQUFRLENBQWYsRUFBa0I7O0FBRWpCLE1BQU1DLGFBQWFsQixhQUFhLENBQWIsRUFBZ0JjLGFBQWEsQ0FBN0IsQ0FBbkI7O0FBRUEsTUFBSSxDQUFDRSxpQkFBaUJHLFFBQWpCLENBQTBCRCxVQUExQixDQUFMLEVBQTRDOztBQUUzQ0Ysb0JBQWlCSSxJQUFqQixDQUFzQkYsVUFBdEI7QUFDQUQsWUFBUyxDQUFUO0FBRUE7QUFFRDs7QUFFRCxRQUFPRCxpQkFBaUJLLEdBQWpCLENBQXFCLFVBQUNDLEdBQUQ7QUFBQSxTQUFTVCxTQUFTUyxHQUFULENBQVQ7QUFBQSxFQUFyQixDQUFQO0FBRUEsQ0F2Q0Q7O0FBeUNBLElBQU1DLGFBQWEsU0FBYkEsVUFBYSxDQUFVQyxlQUFWLEVBQTJCQyxNQUEzQixFQUFtQzs7QUFFckQsUUFBTzs7QUFFTkMsTUFBSUQsTUFGRTtBQUdORSxlQUFhSCxlQUhQO0FBSU5JLGFBQVc7O0FBSkwsRUFBUDtBQVFBLENBVkQ7O0FBWUEsSUFBTUMsaUJBQWlCLFNBQWpCQSxjQUFpQixDQUFVQyxZQUFWLEVBQXdCQyxhQUF4QixFQUF1Qzs7QUFFN0QsS0FBTUMsT0FBTyxFQUFiOztBQUVBRixjQUFhVCxHQUFiLENBQWlCLFVBQUNNLFdBQUQ7QUFBQSxTQUFpQkssS0FBS1osSUFBTCxDQUFVRyxXQUFXSSxXQUFYLEVBQXdCSSxjQUFjRSxLQUFkLEVBQXhCLENBQVYsQ0FBakI7QUFBQSxFQUFqQjs7QUFFQSxRQUFPRCxJQUFQO0FBRUEsQ0FSRDs7QUFVQSxJQUFNRSxrQkFBa0IsU0FBbEJBLGVBQWtCLENBQVVILGFBQVYsRUFBeUI7O0FBRWhELEtBQU1JLGdCQUFnQixFQUF0QjtBQUNBLEtBQU1wQixtQkFBbUIsQ0FBekI7O0FBRUEsS0FBTUYsV0FBV0Qsa0JBQWtCaUIsZUFBZTlCLGdCQUFmLEVBQWlDZ0MsYUFBakMsQ0FBbEIsRUFBbUVJLGFBQW5FLEVBQWtGcEIsZ0JBQWxGLENBQWpCOztBQUVBLFFBQU87QUFFTnFCLFVBRk0sc0JBRU07O0FBRVgsVUFBT3ZCLFFBQVA7QUFFQTtBQU5LLEVBQVA7QUFVQSxDQWpCRDs7QUFtQkF3QixRQUNFQyxNQURGLENBQ1MsTUFEVCxFQUVFQyxPQUZGLENBRVUsaUJBRlYsRUFFNkJMLGVBRjdCOztBQUlBQSxnQkFBZ0JNLE9BQWhCLEdBQTBCLENBQUMsZUFBRCxDQUExQiIsImZpbGUiOiJjb21tb24vc2VydmljZXMvdGFza0RhdGEuc2VydmljZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBxdW90ZXMgKi9cblxuLyogZXNsaW50IG5vLWV4dHJhLXBhcmVuczogW1wiZXJyb3JcIiwgXCJhbGxcIiwgeyBcIm5lc3RlZEJpbmFyeUV4cHJlc3Npb25zXCI6IGZhbHNlIH1dICovXG5cbmNvbnN0IHRhc2tEZXNjcmlwdGlvbnMgPSBbXG5cdGBSZWFkIFwiSGlnaCBQZXJmb3JtYW5jZSBNb2JpbGUgV2ViXCIgYnkgTWF4aW1pbGlhbm8gRmlydG1hbi5gLFxuXHRgSW50ZWdyYXRlIG5nVG91Y2ggb24gVG8tZG8gbGlzdCBhcHAuYCxcblx0YFdhbGsgdG8gVGFyZ2V0IHRvIGJ1eSBmbG9zcy5gLFxuXHRgRG9uYXRlIEFtYXpvbiBib3hlcyB0byBDYXQgU2hlbHRlci5gLFxuXHRgUmVnaXN0ZXIgZm9yIEFuZ3VsYXJNaXggZnQuIEpvaG4gUGFwYSAmIERhbiBXYWhsaW4uYCxcblx0YFdhdGNoIFwiU2VuaW9yIERldnMgcmVhY3QgdG8gUmVhY3RcIiBvbiBZb3VUdWJlLmAsXG5cdGBEbyA0MCBtaW51dGVzIG9mIFN0YW5kaW5nIERlc2sgWW9nYWAsXG5cdGBEbyA2MCBtaW51dGVzIG9mIFN0YXJ0LVVwIFN3aXNzIEJhbGwgQ2FsaXN0aGVuaWNzYCxcblx0YFdhdGNoIFwiU2lsaWNvbmUgVmFsbGV5XCIgU2Vhc29uIDQgb24gSEJPLmAsXG5cdGBQZXQgYSBjb3cuYFxuXTtcblxuY29uc3QgZ2V0UmFuZG9tSW50ID0gZnVuY3Rpb24gKG1pbiwgbWF4KSB7XG5cdFxuXHQvKipcblx0ICogU291cmNlOiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xODIzMDQzMi82MDUxOTc4XG5cdCAqL1xuXHRcblx0Y29uc3QgYnl0ZUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoMSk7XG5cdFxuXHR3aW5kb3cuY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhieXRlQXJyYXkpO1xuXHRcblx0Y29uc3QgcmFuZ2UgPSBtYXggLSBtaW4gKyAxO1xuXHRcblx0Y29uc3QgbWF4UmFuZ2UgPSAyNTY7XG5cdFxuXHRpZiAoYnl0ZUFycmF5WzBdID49IE1hdGguZmxvb3IobWF4UmFuZ2UgLyByYW5nZSkgKiByYW5nZSkge1xuXHRcdFxuXHRcdHJldHVybiBnZXRSYW5kb21JbnQobWluLCBtYXgpO1xuXHRcdFxuXHR9XG5cdFxuXHRyZXR1cm4gbWluICsgKGJ5dGVBcnJheVswXSAlIHJhbmdlKTtcblx0XG59O1xuXG5jb25zdCByYW5kb21pemVUYXNrTGlzdCA9IGZ1bmN0aW9uICh0YXNrTGlzdCwgbnVtT2ZUYXNrcywgbWF4TnVtYmVyT2ZUYXNrcykge1xuXHRcblx0aWYgKG51bU9mVGFza3MgPCAxIHx8IG1heE51bWJlck9mVGFza3MgPCAxKSB7XG5cdFx0XG5cdFx0cmV0dXJuIG51bGw7XG5cdFx0XG5cdH1cblx0XG5cdGlmIChudW1PZlRhc2tzID09PSBtYXhOdW1iZXJPZlRhc2tzKSB7XG5cdFx0XG5cdFx0cmV0dXJuIHRhc2tMaXN0O1xuXHRcdFxuXHR9XG5cdFxuXHRpZiAobnVtT2ZUYXNrcyA8IG1heE51bWJlck9mVGFza3MpIHtcblx0XHRcblx0XHRyZXR1cm4gbnVsbDtcblx0XHRcblx0fVxuXHRcblx0XG5cdGNvbnN0IHJhbmRvbU51bWJlcnNTZXQgPSBbXTtcblx0bGV0IGNvdW50ID0gbWF4TnVtYmVyT2ZUYXNrcztcblx0XG5cdHdoaWxlIChjb3VudCA+IDApIHtcblx0XHRcblx0XHRjb25zdCByYW5kTnVtYmVyID0gZ2V0UmFuZG9tSW50KDAsIG51bU9mVGFza3MgLSAxKTtcblx0XHRcblx0XHRpZiAoIXJhbmRvbU51bWJlcnNTZXQuaW5jbHVkZXMocmFuZE51bWJlcikpIHtcblx0XHRcdFxuXHRcdFx0cmFuZG9tTnVtYmVyc1NldC5wdXNoKHJhbmROdW1iZXIpO1xuXHRcdFx0Y291bnQgLT0gMTtcblx0XHRcdFxuXHRcdH1cblx0XHRcblx0fVxuXHRcblx0cmV0dXJuIHJhbmRvbU51bWJlcnNTZXQubWFwKChudW0pID0+IHRhc2tMaXN0W251bV0pO1xuXHRcbn07XG5cbmNvbnN0IGNyZWF0ZVRhc2sgPSBmdW5jdGlvbiAodGFza0Rlc2NyaXB0aW9uLCB0YXNrSUQpIHtcblx0XG5cdHJldHVybiB7XG5cdFx0XG5cdFx0aWQ6IHRhc2tJRCxcblx0XHRkZXNjcmlwdGlvbjogdGFza0Rlc2NyaXB0aW9uLFxuXHRcdGNvbXBsZXRlZDogZmFsc2Vcblx0XHRcblx0fTtcblx0XG59O1xuXG5jb25zdCBjcmVhdGVUYXNrTGlzdCA9IGZ1bmN0aW9uIChkZXNjcmlwdGlvbnMsIFRhc2tJRFNlcnZpY2UpIHtcblx0XG5cdGNvbnN0IGxpc3QgPSBbXTtcblx0XG5cdGRlc2NyaXB0aW9ucy5tYXAoKGRlc2NyaXB0aW9uKSA9PiBsaXN0LnB1c2goY3JlYXRlVGFzayhkZXNjcmlwdGlvbiwgVGFza0lEU2VydmljZS5nZXRJRCgpKSkpO1xuXHRcblx0cmV0dXJuIGxpc3Q7XG5cdFxufTtcblxuY29uc3QgVGFza0RhdGFTZXJ2aWNlID0gZnVuY3Rpb24gKFRhc2tJRFNlcnZpY2UpIHtcblx0XG5cdGNvbnN0IG51bWJlck9mVGFza3MgPSAxMDtcblx0Y29uc3QgbWF4TnVtYmVyT2ZUYXNrcyA9IDY7XG5cdFxuXHRjb25zdCB0YXNrTGlzdCA9IHJhbmRvbWl6ZVRhc2tMaXN0KGNyZWF0ZVRhc2tMaXN0KHRhc2tEZXNjcmlwdGlvbnMsIFRhc2tJRFNlcnZpY2UpLCBudW1iZXJPZlRhc2tzLCBtYXhOdW1iZXJPZlRhc2tzKTtcblx0XG5cdHJldHVybiB7XG5cdFx0XG5cdFx0Z2V0VGFza3MgKCkge1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gdGFza0xpc3Q7XG5cdFx0XHRcblx0XHR9XG5cdFx0XG5cdH07XG5cdFxufTtcblxuYW5ndWxhclxuXHQubW9kdWxlKFwibWFpblwiKVxuXHQuZmFjdG9yeShcIlRhc2tEYXRhU2VydmljZVwiLCBUYXNrRGF0YVNlcnZpY2UpO1xuXG5UYXNrRGF0YVNlcnZpY2UuJGluamVjdCA9IFtcIlRhc2tJRFNlcnZpY2VcIl07XG4iXX0=
