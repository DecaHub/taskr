"use strict";

/* eslint-disable  no-ternary */
/* eslint-disable  quotes */

/**
* @desc progress disk directive that shows how many tasks have been
* completed.
* @example <dh-progress-disk></dh-progress-disk>
*/

angular.module("main").directive("dhProgressDisk", ["ProgressService", function (ProgressService) {

	return {

		templateUrl: "components/progressDisk/progressDisk.html",
		scope: {
			size: "<",
			thickness: "<",
			fill: "<",
			cycle: "<"
		},
		link: function link(scope, element, attributes) {

			var radiansMultiplier = 2.5;

			var circle = $("#disk", element);
			var progressText = $("#progress", element);
			var startAngle = Math.PI * radiansMultiplier * -1;

			var minSize = 150;
			var minThickness = 3;
			var defaultThickness = 10;
			var defaultFill = "white";

			var fullProgress = 100;

			progressText.css("color", scope.fill);

			scope.$watch(ProgressService.getProgress, function (newVal, oldVal) {

				circle.circleProgress({
					value: newVal / scope.cycle,
					size: scope.size >= minSize ? scope.size : minSize,
					startAngle: startAngle,
					thickness: scope.thickness <= scope.size / 2 && scope.thickness >= minThickness ? scope.thickness : defaultThickness,
					fill: scope.fill ? scope.fill : defaultFill

				}).on("circle-animation-progress", function (event, progress, stepValue) {

					var displayStepValue = (stepValue * fullProgress).toFixed(0);

					if (displayStepValue == fullProgress) {
						// eslint-disable-line eqeqeq

						progressText.text("");
						progressText.css("font-size", "500%");
						progressText.append('<i class="fa fa-trophy" aria-hidden="true"></i>');

						return;
					}

					progressText.text(displayStepValue);
				});
			});
		}
	};
}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvcHJvZ3Jlc3NEaXNrL3Byb2dyZXNzRGlzay5kaXJlY3RpdmUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsImRpcmVjdGl2ZSIsIlByb2dyZXNzU2VydmljZSIsInRlbXBsYXRlVXJsIiwic2NvcGUiLCJzaXplIiwidGhpY2tuZXNzIiwiZmlsbCIsImN5Y2xlIiwibGluayIsImVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwicmFkaWFuc011bHRpcGxpZXIiLCJjaXJjbGUiLCIkIiwicHJvZ3Jlc3NUZXh0Iiwic3RhcnRBbmdsZSIsIk1hdGgiLCJQSSIsIm1pblNpemUiLCJtaW5UaGlja25lc3MiLCJkZWZhdWx0VGhpY2tuZXNzIiwiZGVmYXVsdEZpbGwiLCJmdWxsUHJvZ3Jlc3MiLCJjc3MiLCIkd2F0Y2giLCJnZXRQcm9ncmVzcyIsIm5ld1ZhbCIsIm9sZFZhbCIsImNpcmNsZVByb2dyZXNzIiwidmFsdWUiLCJvbiIsImV2ZW50IiwicHJvZ3Jlc3MiLCJzdGVwVmFsdWUiLCJkaXNwbGF5U3RlcFZhbHVlIiwidG9GaXhlZCIsInRleHQiLCJhcHBlbmQiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7O0FBRUM7Ozs7OztBQU1EQSxRQUFRQyxNQUFSLENBQWUsTUFBZixFQUF1QkMsU0FBdkIsQ0FBaUMsZ0JBQWpDLEVBQW1ELENBQUMsaUJBQUQsRUFBb0IsVUFBVUMsZUFBVixFQUEyQjs7QUFFakcsUUFBTzs7QUFFTkMsZUFBYSwyQ0FGUDtBQUdOQyxTQUFPO0FBQ05DLFNBQU0sR0FEQTtBQUVOQyxjQUFXLEdBRkw7QUFHTkMsU0FBTSxHQUhBO0FBSU5DLFVBQU87QUFKRCxHQUhEO0FBU05DLE1BVE0sZ0JBU0FMLEtBVEEsRUFTT00sT0FUUCxFQVNnQkMsVUFUaEIsRUFTNEI7O0FBRWpDLE9BQU1DLG9CQUFvQixHQUExQjs7QUFFQSxPQUFNQyxTQUFTQyxFQUFFLE9BQUYsRUFBV0osT0FBWCxDQUFmO0FBQ0EsT0FBTUssZUFBZUQsRUFBRSxXQUFGLEVBQWVKLE9BQWYsQ0FBckI7QUFDQSxPQUFNTSxhQUFhQyxLQUFLQyxFQUFMLEdBQVVOLGlCQUFWLEdBQThCLENBQUMsQ0FBbEQ7O0FBRUEsT0FBTU8sVUFBVSxHQUFoQjtBQUNBLE9BQU1DLGVBQWUsQ0FBckI7QUFDQSxPQUFNQyxtQkFBbUIsRUFBekI7QUFDQSxPQUFNQyxjQUFjLE9BQXBCOztBQUVBLE9BQU1DLGVBQWUsR0FBckI7O0FBRUFSLGdCQUFhUyxHQUFiLENBQWlCLE9BQWpCLEVBQTBCcEIsTUFBTUcsSUFBaEM7O0FBRUFILFNBQU1xQixNQUFOLENBQWF2QixnQkFBZ0J3QixXQUE3QixFQUEwQyxVQUFVQyxNQUFWLEVBQWtCQyxNQUFsQixFQUEwQjs7QUFFbkVmLFdBQU9nQixjQUFQLENBQXNCO0FBQ3JCQyxZQUFPSCxTQUFTdkIsTUFBTUksS0FERDtBQUVyQkgsV0FDQ0QsTUFBTUMsSUFBTixJQUFjYyxPQUFkLEdBQ0dmLE1BQU1DLElBRFQsR0FFR2MsT0FMaUI7QUFNckJILDJCQU5xQjtBQU9yQlYsZ0JBQ0NGLE1BQU1FLFNBQU4sSUFBbUJGLE1BQU1DLElBQU4sR0FBYSxDQUFoQyxJQUFxQ0QsTUFBTUUsU0FBTixJQUFtQmMsWUFBeEQsR0FDR2hCLE1BQU1FLFNBRFQsR0FFR2UsZ0JBVmlCO0FBV3JCZCxXQUNDSCxNQUFNRyxJQUFOLEdBQ0dILE1BQU1HLElBRFQsR0FFR2U7O0FBZGlCLEtBQXRCLEVBZ0JHUyxFQWhCSCxDQWdCTSwyQkFoQk4sRUFnQm1DLFVBQVVDLEtBQVYsRUFBaUJDLFFBQWpCLEVBQTJCQyxTQUEzQixFQUFzQzs7QUFFeEUsU0FBTUMsbUJBQW1CLENBQUNELFlBQVlYLFlBQWIsRUFBMkJhLE9BQTNCLENBQW1DLENBQW5DLENBQXpCOztBQUVBLFNBQUlELG9CQUFvQlosWUFBeEIsRUFBc0M7QUFBRTs7QUFFdkNSLG1CQUFhc0IsSUFBYixDQUFrQixFQUFsQjtBQUNBdEIsbUJBQWFTLEdBQWIsQ0FBaUIsV0FBakIsRUFBOEIsTUFBOUI7QUFDQVQsbUJBQWF1QixNQUFiLENBQW9CLGlEQUFwQjs7QUFFQTtBQUVBOztBQUVEdkIsa0JBQWFzQixJQUFiLENBQWtCRixnQkFBbEI7QUFFQSxLQWhDRDtBQWtDQSxJQXBDRDtBQXNDQTtBQWhFSyxFQUFQO0FBb0VBLENBdEVrRCxDQUFuRCIsImZpbGUiOiJjb21wb25lbnRzL3Byb2dyZXNzRGlzay9wcm9ncmVzc0Rpc2suZGlyZWN0aXZlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1kaXNhYmxlICBuby10ZXJuYXJ5ICovXG4vKiBlc2xpbnQtZGlzYWJsZSAgcXVvdGVzICovXG4gXG4gLyoqXG4gKiBAZGVzYyBwcm9ncmVzcyBkaXNrIGRpcmVjdGl2ZSB0aGF0IHNob3dzIGhvdyBtYW55IHRhc2tzIGhhdmUgYmVlblxuICogY29tcGxldGVkLlxuICogQGV4YW1wbGUgPGRoLXByb2dyZXNzLWRpc2s+PC9kaC1wcm9ncmVzcy1kaXNrPlxuICovXG5cbmFuZ3VsYXIubW9kdWxlKFwibWFpblwiKS5kaXJlY3RpdmUoXCJkaFByb2dyZXNzRGlza1wiLCBbXCJQcm9ncmVzc1NlcnZpY2VcIiwgZnVuY3Rpb24gKFByb2dyZXNzU2VydmljZSkge1xuXHRcblx0cmV0dXJuIHtcblx0XHRcblx0XHR0ZW1wbGF0ZVVybDogXCJjb21wb25lbnRzL3Byb2dyZXNzRGlzay9wcm9ncmVzc0Rpc2suaHRtbFwiLFxuXHRcdHNjb3BlOiB7XG5cdFx0XHRzaXplOiBcIjxcIixcblx0XHRcdHRoaWNrbmVzczogXCI8XCIsXG5cdFx0XHRmaWxsOiBcIjxcIixcblx0XHRcdGN5Y2xlOiBcIjxcIlxuXHRcdH0sXG5cdFx0bGluayAoc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcblx0XHRcdFxuXHRcdFx0Y29uc3QgcmFkaWFuc011bHRpcGxpZXIgPSAyLjU7XG5cdFx0XHRcblx0XHRcdGNvbnN0IGNpcmNsZSA9ICQoXCIjZGlza1wiLCBlbGVtZW50KTtcblx0XHRcdGNvbnN0IHByb2dyZXNzVGV4dCA9ICQoXCIjcHJvZ3Jlc3NcIiwgZWxlbWVudCk7XG5cdFx0XHRjb25zdCBzdGFydEFuZ2xlID0gTWF0aC5QSSAqIHJhZGlhbnNNdWx0aXBsaWVyICogLTE7XG5cdFx0XHRcblx0XHRcdGNvbnN0IG1pblNpemUgPSAxNTA7XG5cdFx0XHRjb25zdCBtaW5UaGlja25lc3MgPSAzO1xuXHRcdFx0Y29uc3QgZGVmYXVsdFRoaWNrbmVzcyA9IDEwO1xuXHRcdFx0Y29uc3QgZGVmYXVsdEZpbGwgPSBcIndoaXRlXCI7XG5cdFx0XHRcblx0XHRcdGNvbnN0IGZ1bGxQcm9ncmVzcyA9IDEwMDtcblx0XHRcdFxuXHRcdFx0cHJvZ3Jlc3NUZXh0LmNzcyhcImNvbG9yXCIsIHNjb3BlLmZpbGwpO1xuXHRcdFx0XG5cdFx0XHRzY29wZS4kd2F0Y2goUHJvZ3Jlc3NTZXJ2aWNlLmdldFByb2dyZXNzLCBmdW5jdGlvbiAobmV3VmFsLCBvbGRWYWwpIHtcblx0XHRcdFx0XG5cdFx0XHRcdGNpcmNsZS5jaXJjbGVQcm9ncmVzcyh7XG5cdFx0XHRcdFx0dmFsdWU6IG5ld1ZhbCAvIHNjb3BlLmN5Y2xlLFxuXHRcdFx0XHRcdHNpemU6XG5cdFx0XHRcdFx0XHRzY29wZS5zaXplID49IG1pblNpemVcblx0XHRcdFx0XHRcdFx0PyBzY29wZS5zaXplXG5cdFx0XHRcdFx0XHRcdDogbWluU2l6ZSxcblx0XHRcdFx0XHRzdGFydEFuZ2xlLFxuXHRcdFx0XHRcdHRoaWNrbmVzczpcblx0XHRcdFx0XHRcdHNjb3BlLnRoaWNrbmVzcyA8PSBzY29wZS5zaXplIC8gMiAmJiBzY29wZS50aGlja25lc3MgPj0gbWluVGhpY2tuZXNzXG5cdFx0XHRcdFx0XHRcdD8gc2NvcGUudGhpY2tuZXNzXG5cdFx0XHRcdFx0XHRcdDogZGVmYXVsdFRoaWNrbmVzcyxcblx0XHRcdFx0XHRmaWxsOlxuXHRcdFx0XHRcdFx0c2NvcGUuZmlsbFxuXHRcdFx0XHRcdFx0XHQ/IHNjb3BlLmZpbGxcblx0XHRcdFx0XHRcdFx0OiBkZWZhdWx0RmlsbFxuXHRcdFx0XHRcdFxuXHRcdFx0XHR9KS5vbihcImNpcmNsZS1hbmltYXRpb24tcHJvZ3Jlc3NcIiwgZnVuY3Rpb24gKGV2ZW50LCBwcm9ncmVzcywgc3RlcFZhbHVlKSB7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Y29uc3QgZGlzcGxheVN0ZXBWYWx1ZSA9IChzdGVwVmFsdWUgKiBmdWxsUHJvZ3Jlc3MpLnRvRml4ZWQoMCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYgKGRpc3BsYXlTdGVwVmFsdWUgPT0gZnVsbFByb2dyZXNzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdHByb2dyZXNzVGV4dC50ZXh0KFwiXCIpO1xuXHRcdFx0XHRcdFx0cHJvZ3Jlc3NUZXh0LmNzcyhcImZvbnQtc2l6ZVwiLCBcIjUwMCVcIik7XG5cdFx0XHRcdFx0XHRwcm9ncmVzc1RleHQuYXBwZW5kKCc8aSBjbGFzcz1cImZhIGZhLXRyb3BoeVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjwvaT4nKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdHByb2dyZXNzVGV4dC50ZXh0KGRpc3BsYXlTdGVwVmFsdWUpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdH1cblx0XHRcblx0fTtcblx0XG59XSk7XG4iXX0=
